(ns exercises.chapter1.exercise1_23)

;Exercise 1.23:
; The smallest-divisor procedure shown at the start of this section does lots of needless testing:
;   After it checks to see if the number is divisible by 2 there is no point in checking to see if
;   it is divisible by any larger even numbers.
; This suggests that the values used for test-divisor should not be 2, 3, 4, 5, 6, . . .,
;   but rather 2, 3, 5, 7, 9, . . ..
; To implement this change, define a procedure next that returns 3 if its input is equal to 2
;   and otherwise returns its input plus 2. Modify the smallest-divisor procedure to use
;   (next test-divisor) instead of (+ test-divisor 1) .
; With timed-prime-test incorporating this modified version of smallest-divisor,
;   run the test for each of the 12 primes found in Exercise 1.22.
; Since this modification halves the number of test steps, you should expect it to run about
;   twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the
;   speeds of the two algorithms, and how do you explain the fact that it is different from 2?

(defn square [x] (* x x))

(defn divides? [a b] (= (rem b a) 0))

(defn next [n]
  (if (= n 2 )
    3
    (+ n 2)))

(assert (= 3 (next 2)))
(assert (= 5 (next 3)))

(defn find-divisor [n test-divisor]
  (cond (> (square test-divisor) n) n
        (divides? test-divisor n) test-divisor
        :else (recur n (next test-divisor))))

(defn smallest-divisor [n]
  (find-divisor n 2))

(defn prime? [n]
  (= n (smallest-divisor n)))

(defn report-prime [elapsed-time]
  (print " *** ")
  (println (/ elapsed-time 1000.0) "μs")
  true)
(defn start-prime-test [n start-time]
  (if (prime? n)
    (report-prime (- (System/nanoTime) start-time))))
(defn timed-prime-test [n]
  (newline)
  (print n)
  (start-prime-test n (System/nanoTime)))

;(timed-prime-test 1999)
;=> 1999 *** 161.063 μs

(defn search-for-primes [min]
  (loop [counter 1 min min]
    (if (<= counter 3)
      (let [odd-min (if (odd? min) min (inc min))
            was-prime (timed-prime-test odd-min)
            new-counter (if was-prime (inc counter) counter)]
        (recur new-counter (inc odd-min))))))

(search-for-primes 10000)
;(search-for-primes 10000)
;
;10001
;10003
;10005
;10007 *** 34.983 μs
;
;10009 *** 37.568 μs
;
;10011
;10013
;10015
;10017
;10019
;10021
;10023
;10025
;10027
;10029
;10031
;10033
;10035
;10037 *** 15.594 μs

(search-for-primes 100000)
;100001
;100003 *** 84.908 μs
;
;100005
;100007
;100009
;100011
;100013
;100015
;100017
;100019 *** 132.047 μs
;
;100021
;100023
;100025
;100027
;100029
;100031
;100033
;100035
;100037
;100039
;100041
;100043 *** 88.271 μs

(search-for-primes 1000000)
;1000001
;1000003 *** 220.525 μs
;
;1000005
;1000007
;1000009
;1000011
;1000013
;1000015
;1000017
;1000019
;1000021
;1000023
;1000025
;1000027
;1000029
;1000031
;1000033 *** 213.469 μs
;
;1000035
;1000037 *** 289.625 μs

; t₁₀₀₀₀   = (/ (/ (+ 34.983 37.568 15.594) 3) = 29.38166666666666
; t₁₀₀₀₀₀  = (/ (+ 84.908 132.047 88.271) 3)   = 101.742
; t₁₀₀₀₀₀₀ = (/ (+ 220.525 213.469 289.625) 3) = 241.20633333333333

;√10 = 3.16227766017

; t₁₀₀₀₀₀/t₁₀₀₀₀   = (/ 101.742 29.38166666666666) = 3.4627715695728636 ~= √12
; t₁₀₀₀₀₀₀/t₁₀₀₀₀₀ = (/ 241.20633333333333 101.742) = 2.370764613761606 ~= √6

;t₁₀₀₀₀inc/t₁₀₀₀₀next     = (/ 31.358666666666668 29.38166666666666)  = 1.0672868568835445
;t₁₀₀₀₀₀inc/t₁₀₀₀₀₀next   = (/ 134.2926666666667 101.742)             = 1.3199334263791422
;t₁₀₀₀₀₀₀inc/t₁₀₀₀₀₀₀next = (/ 370.93533333333335 241.20633333333333) = 1.5378341364723702

; The ratios for the increment and next version are not exactly 2.
; The computations are extremely fast in modern computers.
; Probably, the greater the number to be tested, closer to 2.

; Newer computers are faster. So the effects are more visible with larger numbers.
; As with Exercise 1.22, when I tested it with 10^13 and 10^14, I got StackOverflow error.
; For it to work, I had to change 'find-divisor' to have Tail Call Optimization by using 'recur'.

(search-for-primes 10000000000000)
;10000000000001
;10000000000003
;10000000000005
;10000000000007
;10000000000009
;10000000000011
;10000000000013
;10000000000015
;10000000000017
;10000000000019
;10000000000021
;10000000000023
;10000000000025
;10000000000027
;10000000000029
;10000000000031
;10000000000033
;10000000000035
;10000000000037 *** 141248.486 μs
;
;10000000000039
;10000000000041
;10000000000043
;10000000000045
;10000000000047
;10000000000049
;10000000000051 *** 84150.274 μs
;
;10000000000053
;10000000000055
;10000000000057
;10000000000059
;10000000000061
;10000000000063
;10000000000065
;10000000000067
;10000000000069
;10000000000071
;10000000000073
;10000000000075
;10000000000077
;10000000000079
;10000000000081
;10000000000083
;10000000000085
;10000000000087
;10000000000089
;10000000000091
;10000000000093
;10000000000095
;10000000000097
;10000000000099 *** 90881.483 μs

(search-for-primes 100000000000000)
;100000000000001
;100000000000003
;100000000000005
;100000000000007
;100000000000009
;100000000000011
;100000000000013
;100000000000015
;100000000000017
;100000000000019
;100000000000021
;100000000000023
;100000000000025
;100000000000027
;100000000000029
;100000000000031 *** 287944.922 μs
;
;100000000000033
;100000000000035
;100000000000037
;100000000000039
;100000000000041
;100000000000043
;100000000000045
;100000000000047
;100000000000049
;100000000000051
;100000000000053
;100000000000055
;100000000000057
;100000000000059
;100000000000061
;100000000000063
;100000000000065
;100000000000067 *** 261108.438 μs
;
;100000000000069
;100000000000071
;100000000000073
;100000000000075
;100000000000077
;100000000000079
;100000000000081
;100000000000083
;100000000000085
;100000000000087
;100000000000089
;100000000000091
;100000000000093
;100000000000095
;100000000000097 *** 278244.472 μs

(search-for-primes 1000000000000000)
;1000000000000001
;1000000000000003
;1000000000000005
;1000000000000007
;1000000000000009
;1000000000000011
;1000000000000013
;1000000000000015
;1000000000000017
;1000000000000019
;1000000000000021
;1000000000000023
;1000000000000025
;1000000000000027
;1000000000000029
;1000000000000031
;1000000000000033
;1000000000000035
;1000000000000037 *** 603284.552 μs
;
;1000000000000039
;1000000000000041
;1000000000000043
;1000000000000045
;1000000000000047
;1000000000000049
;1000000000000051
;1000000000000053
;1000000000000055
;1000000000000057
;1000000000000059
;1000000000000061
;1000000000000063
;1000000000000065
;1000000000000067
;1000000000000069
;1000000000000071
;1000000000000073
;1000000000000075
;1000000000000077
;1000000000000079
;1000000000000081
;1000000000000083
;1000000000000085
;1000000000000087
;1000000000000089
;1000000000000091 *** 603024.328 μs
;
;1000000000000093
;1000000000000095
;1000000000000097
;1000000000000099
;1000000000000101
;1000000000000103
;1000000000000105
;1000000000000107
;1000000000000109
;1000000000000111
;1000000000000113
;1000000000000115
;1000000000000117
;1000000000000119
;1000000000000121
;1000000000000123
;1000000000000125
;1000000000000127
;1000000000000129
;1000000000000131
;1000000000000133
;1000000000000135
;1000000000000137
;1000000000000139
;1000000000000141
;1000000000000143
;1000000000000145
;1000000000000147
;1000000000000149
;1000000000000151
;1000000000000153
;1000000000000155
;1000000000000157
;1000000000000159 *** 598253.246 μs

; t10¹³ (avg) = 105426.74766666668
; t10¹⁴ (avg) = 275765.94399999996
; t10¹⁵ (avg) = 601520.7086666666

; t10¹⁴ / t10¹³ = 2.615711383527677 (more or less close to √10 = 3.16227766017)
; t10¹⁵ / t10¹⁴ = 2.181272639911862

;t10¹³inc/t10¹³next = (/ 143357.308 105426.74766666668) = 1.359781186205804
;t10¹⁴inc/t10¹⁴next = (/ 434798.30133333337 275765.94399999996) = 1.5766932458249212
;t10¹⁵inc/t10¹⁵next = (/ 1093953.6693333334 601520.7086666666) = 1.8186467291511803

;It seems to get closer and close to 2 as n increases.
